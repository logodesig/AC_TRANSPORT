// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique
  name         String?
  type         UserType?      @default(ADMIN)
  password     String
  surname      String?
  // role         Role? @relation(fields: [role], references: [id])
  // roleid String?
  avatarUrl    String?
  // mission      Mission[]      @relation("driverUser")
  DriverProfil DriverProfil[]
  Maintenance  Maintenance[]
  // createdMission   Mission[] @relation("UserId")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isDelete     Boolean?       @default(false)

  Vehicles Vehicles[]
  Address  Address[]
  Mission  Mission[]

  @@map("user")
}

model Role {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDelete    Boolean? @default(false)

  @@map("role")
}

model Opportunite {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nameOp         String
  description    String
  address        Address      @relation(fields: [addressId], references: [id])
  addressId      String       @db.Uuid
  driverprofil   DriverProfil @relation(fields: [driverprofilId], references: [id])
  driverprofilId String       @db.Uuid
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isDelete       Boolean?     @default(false)

  @@map("opportunite")
}

model Address {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  country        String
  city           String
  quater         String?
  order          Int?
  driverprofil   DriverProfil? @relation(fields: [driverprofilId], references: [id])
  driverprofilId String?       @db.Uuid
  User           User?         @relation(fields: [UserId], references: [id])
  UserId         String?       @db.Uuid
  Opportunite    Opportunite[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Mission        Mission?      @relation(fields: [missionId], references: [id])
  incident       Incident?     @relation(fields: [incidentId], references: [id])
  incidentId     String?       @db.Uuid
  missionId      String?       @db.Uuid
  isDelete       Boolean?      @default(false)

  @@map("address")
}

model Vehicles {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  type             String
  state            String
  model            String
  tonnage          Int
  User             User           @relation(fields: [UserId], references: [id])
  UserId           String         @db.Uuid
  firstYearTakeoff DateTime?
  maintenances     Maintenance[]
  marchandise      Marchandise[]
  missions         Mission[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  isDelete         Boolean?       @default(false)
  DriverProfil     DriverProfil[]

  @@map("vehicles")
}

model Maintenance {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  type            String
  maintenanceDate DateTime
  vehicle         Vehicles @relation(fields: [vehicleId], references: [id])
  vehicleId       String   @db.Uuid
  user            User[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isDelete        Boolean? @default(false)

  @@map("maintenance")
}

model Marchandise {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type          String
  name          String
  quantity      Int
  transitNumber Int
  volume        Decimal
  volumeUnit    VolumeUnit
  vehicle       Vehicles   @relation(fields: [vehicleId], references: [id])
  vehicleId     String     @db.Uuid
  note          Note[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  isDelete      Boolean?   @default(false)

  @@map("marchandise")
}

enum UserType {
  ADMIN
  CHAUFFEUR
}

enum VolumeUnit {
  CM3
  CBM
  LITRES
  M3
}

model Mission {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  missionName    String
  description    String
  dateStart      DateTime
  driverprofil   DriverProfil   @relation(fields: [driverprofilId], references: [id])
  driverprofilId String         @db.Uuid
  vehicle        Vehicles       @relation(fields: [vehicleid], references: [id])
  vehicleid      String         @db.Uuid
  status         MissionStatus? @default(IN_COMMING)
  dateFinish     DateTime
  User           User           @relation(fields: [UserId], references: [id])
  UserId         String         @db.Uuid
  // journey      Address[]
  // Incident     Incident[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isDelete       Boolean?       @default(false)
  Incident       Incident[]
  Address        Address[]

  @@map("mission")
}

enum MissionStatus {
  IN_COMMING
  CURRENTLY
  FINISH
}

model Note {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description   String
  Marchandise   Marchandise? @relation(fields: [marchandiseId], references: [id])
  marchandiseId String?      @db.Uuid
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  isDelete      Boolean?     @default(false)

  @@map("note")
}

model DriverProfil {
  id                     String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  DrivingLicense         String
  name                   String?
  email                  String
  password               String
  vehicle                Vehicles?     @relation(fields: [vehicleid], references: [id])
  vehicleid              String?       @db.Uuid
  DateOfBirth            DateTime
  DrivingLicenseRectoUrl String?
  DrivingLicenseVersoUrl String?
  User                   User          @relation(fields: [UserId], references: [id])
  UserId                 String        @db.Uuid
  type                   UserType?     @default(CHAUFFEUR)
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  isDelete               Boolean?      @default(false)
  Opportunite            Opportunite[]
  Address                Address[]
  Mission                Mission[]

  @@map("driverprofil")
}

model Incident {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String
  address     Address[]
  mission     Mission   @relation(fields: [missionId], references: [id])
  missionId   String    @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDelete    Boolean?  @default(false)

  @@map("incident")
}

model Location {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDelete  Boolean? @default(false)
  @@map("location")
}
